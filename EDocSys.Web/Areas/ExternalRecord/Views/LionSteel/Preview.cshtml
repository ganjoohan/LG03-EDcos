@model EDocSys.Web.Areas.ExternalRecord.Models.LionSteelViewModel
@using EDocSys.Infrastructure.Identity.Models;
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

<div class="row" style="max-width:1000px">
    <div class="col-12">
        <div class="documentation p-3 mb-3 print-container">
            <div class="@(User.IsInRole("E") || ViewBag.RoleE || User.IsInRole("SuperAdmin") || ViewBag.RoleSA ? "" : "no-print")">
            <div class="row">
                <div class="col-sm-3 documentation-col">
                    <h4>
                        <img src="~/images/logo.png" />
                    </h4>
                </div>
                <div class="col-sm-6 documentation-col text-center">
                    <h1>
                        STEEL DIVISION <br /><small>@Model.CompanyName</small>
                    </h1>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-12 col-md-12 text-center">
                    <div class="color-palette-set">
                        <h3 class="bg-secondary color-palette">External Record</h3>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-12">
                    <table class="table table-bordered table-sm">
                        <tbody>
                            <tr>
                                <td>Company</td>
                                <td>@Model.CompanyName</td>
                                <td>Location</td>
                                <td>@Model.Location</td>
                            </tr>
                            <tr>
                                <td>Process</td>
                                <td>@Model.ProcessName</td>
                                <td>Retention Prd</td>
                                <td>@Model.RetentionPrd</td>
                            </tr>
                            <tr>
                                <td>Form No</td>
                                <td>@Model.FormNo</td>
                                <td>Resp. Person</td>
                                <td>@Model.PIC</td>
                            </tr>
                            <tr>
                                <td>Title</td>
                                <td>@Model.Title</td>
                                <td>Filing System</td>
                                <td>@Model.FilingSystem</td>
                            </tr>
                            <tr>
                                <td>Description</td>
                                <td>@Model.Description</td>
                                <td>Revision No</td>
                                <td>@Model.RevisionNo</td>
                            </tr>
                            <tr>
                                <td>Type</td>     
                                <td>@Model.Type</td>  
                                <td>Revision Date</td>
                                <td>@Html.DisplayFor(model => model.RevisionDate)</td>
                            </tr>
                              <tr>
                                <td>Sub-Type</td>     
                                <td>@Model.SubType</td>  
                                <td>Expiry Date</td>
                                <td>@Html.DisplayFor(model => model.ExpiryDate)</td>
                            </tr>
                            <tr>
                                <td>Inform Period</td>     
                                <td>@Model.InformPeriod days</td>  
                                <td></td>
                                <td></td>
                            </tr>
                            <tr>
                                <td>Keep Inform List</td>
                                <td  colspan="4">@Model.InformedList</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>        

               @if(Model.MyAttachments.Count > 0)
            {
                <div class="row no-print">
                <div class="col-md-12">
                    <div class="form-group row">
                        <div class="col">
                            <p><b>List of Attachments</b></p>
                           <table class="table table-bordered table-sm">
                               <tbody>
                                   <tr>
                                       <th>No</th>
                                       <th>File</th>
                                       <th></th>
                                   </tr>
                                    @{
                                        int rowCount = 0;
                                    
                                       foreach(var attachment in Model.MyAttachments)
                                        {
                                                rowCount = rowCount + 1;
                                                <tr>
                                                    <td>@rowCount</td>
                                                    <td>@attachment.FileName</td>
                                                    <td> 
                                                        <a href="/externalrecord/lionsteel/OnGetDownloadFile?fileId=@attachment.Id" ,@attachment.FileName" class="badge badge-success" >Download</a>                     
                                                    </td>
                                                </tr>
                                        }
                                   }
                               </tbody>
                           </table>
                        </div>

                    </div>
                </div>
            </div>
            }

            <div class="row">
                <div class="col-12">
                    <table class="table table-bordered table-sm">
                        <tbody>
                            <tr>
                                <td colspan="2">
                                    <h6><b>CONTROLLED DOCUMENT</b></h6>
                                    <p>
                                        Note: This document is the property of the Company. It shall not be reproduced, copied, altered or disclosed
                                        to any person without written consent of the HOC/HOD and shall be returned to the Company.
                                    </p>
                                </td>
                            </tr>
                            <tr>
                                <td width="50%">CONTROLLED COPY</td>
                                <td>ELECTRONIC - @Model.PrintCount
                                 @*   @if (User.IsInRole("E") || ViewBag.RoleE || User.IsInRole("SuperAdmin") || ViewBag.RoleSA)
                                        {
                                            <div class="no-print">
                                                <form method="get" asp-area="QualityRecord" asp-controller="LionSteel" asp-action="Preview" asp-route-id="@Model.Id">
                                                    <input id="noElectronic" type="text" asp-for="PrintCount" name="PrintCount" class="form-control">   
                                                    <button type="submit" class="btn btn-success">Update Electronic</button>
                                                </form>
                                            </div>
                                        }*@
                                        </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
              @if(User.IsInRole("E") || ViewBag.RoleE || User.IsInRole("SuperAdmin") || ViewBag.RoleSA)
            {
            <div class="row print-only">
                <table>
                    <tbody>
                        <tr>
                            <td>Printed By</td>
                            <td>@User.Identity.Name/@Model.CompanyName on @DateTime.Now</td>
                        </tr>
                    </tbody>
                </table>
            </div>   
                }
        </div>
    </div>
</div>

<!-- this row will not appear when printing -->
            <div class="row no-print">
                <div class="col-12">
                    <a onclick="copyPageUrl()" class="btn btn-default float-right"><i class="fas fa-copy"></i> Copy Doc URL</a>
                            <a href="/externalrecord/lionsteel/CreateOrEdit?id=@Model.Id&rev=true&&ce=bd773a2a-ffc6-4ed2-9ba3-c7ea631628be" class="btn btn-default float-right">
                            <i class="fas fa-copy"></i>
                            New Revision External Record
                        </a>
                    @if (User.IsInRole("E") || ViewBag.RoleE || User.IsInRole("SuperAdmin") || ViewBag.RoleSA)//User.IsInRole("D") || User.IsInRole("A") || 
                    {
                       @* <button class="btn btn-default" onclick="window.print();"><i class="fas fa-print"></i> Print</button>*@
                           <a  class="btn btn-default" onclick="window.print();" ><i class="fas fa-print"></i> Print</a>
                    }
                    <a href="/externalrecord/lionsteel/CreateOrEdit?id=@Model.Id&&ce=bd773a2a-ffc6-4ed2-9ba3-c7ea631628be" class="btn bg-success">
                                    <i class="fas fa-pencil-alt"></i>
                                    Edit External Record
                                </a>
             </div>
            </div>
            </div>
@section Scripts {
    <style>
    .print-only{
        display: none;
    }

    @@media print {
        .no-print {
            display: none;
        }

        .print-only{
            display: block;
        }

        ::-webkit-scrollbar {
            display: none;
        }

        div { page-break-inside:auto; width:auto }
        table { page-break-inside:auto; width:auto; margin-bottom:5px }
        tr    { page-break-inside:auto}
}
</style>
    <script>
        document.getElementById("btnPrint").onclick = function () {
            printElement(document.getElementById("printThis"));

            var modThis = document.querySelector("#printSection .modifyMe");
            modThis.appendChild(document.createTextNode(" new"));

            window.print();
        }

        function printElement(elem) {
            var domClone = elem.cloneNode(true);

            var $printSection = document.getElementById("printSection");

            if (!$printSection) {
                var $printSection = document.createElement("div");
                $printSection.id = "printSection";
                document.body.appendChild($printSection);
            }

            $printSection.innerHTML = "";

            $printSection.appendChild(domClone);
        }
    </script>

    <script src="~/ckeditor5-build-classic/build/ckeditor.js"></script>

    <script>
    class MyUploadAdapter {
        constructor(loader) {
            // The file loader instance to use during the upload. It sounds scary but do not
            // worry — the loader will be passed into the adapter later on in this guide.
            this.loader = loader;
        }

        // Starts the upload process.
        upload() {
            return this.loader.file
                .then(file => new Promise((resolve, reject) => {
                    this._initRequest();
                    this._initListeners(resolve, reject, file);
                    this._sendRequest(file);
                }));
        }

        // Aborts the upload process.
        abort() {
            if (this.xhr) {
                this.xhr.abort();
            }
        }

        // Initializes the XMLHttpRequest object using the URL passed to the constructor.
        _initRequest() {
            const xhr = this.xhr = new XMLHttpRequest();

            // Note that your request may look different. It is up to you and your editor
            // integration to choose the right communication channel. This example uses
            // a POST request with JSON as a data structure but your configuration
            // could be different.
            xhr.open('POST', '@Url.Action("UploadImage","LionSteel")', true);
            xhr.responseType = 'json';
        }

        _initListeners(resolve, reject, file) {
            const xhr = this.xhr;
            const loader = this.loader;
            const genericErrorText = `Couldn't upload file: ${file.name}.`;

            xhr.addEventListener('error', () => reject(genericErrorText));
            xhr.addEventListener('abort', () => reject());
            xhr.addEventListener('load', () => {
                const response = xhr.response;

                // This example assumes the XHR server's "response" object will come with
                // an "error" which has its own "message" that can be passed to reject()
                // in the upload promise.
                //
                // Your integration may handle upload errors in a different way so make sure
                // it is done properly. The reject() function must be called when the upload fails.
                if (!response || response.error) {
                    return reject(response && response.error ? response.error.message : genericErrorText);
                }

                // If the upload is successful, resolve the upload promise with an object containing
                // at least the "default" URL, pointing to the image on the server.
                // This URL will be used to display the image in the content. Learn more in the
                // UploadAdapter#upload documentation.
                resolve({
                    default: response.url
                });
            });

            // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
            // properties which are used e.g. to display the upload progress bar in the editor
            // user interface.
            if (xhr.upload) {
                xhr.upload.addEventListener('progress', evt => {
                    if (evt.lengthComputable) {
                        loader.uploadTotal = evt.total;
                        loader.uploaded = evt.loaded;
                    }
                });
            }
        }

        // Prepares the data and sends the request.
        _sendRequest(file) {
            // Prepare the form data.
            const data = new FormData();

            data.append('upload', file);

            // Important note: This is the right place to implement security mechanisms
            // like authentication and CSRF protection. For instance, you can use
            // XMLHttpRequest.setRequestHeader() to set the request headers containing
            // the CSRF token generated earlier by your application.

            // Send the request.
            this.xhr.send(data);
        }

    }

    function MyCustomUploadAdapterPlugin(editor) {
        editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
            // Configure the URL to the upload script in your back-end here!
            return new MyUploadAdapter(loader);
        };
    }

    ClassicEditor
        .create(document.querySelector('#editor'),
                {
                    toolbar: {
                        items: [

                        ]
                    }
            }
        )

        .then(editor => {
            window.editor = editor;
            editor.isReadOnly = true;
        })

        .catch(error => {
            console.error(error);
        });
    </script>
    <script>
    function copyPageUrl() {
        var copyText = "https://edocs.lion.com.my/externalrecord/lionsteel/preview?id=" + @Model.Id.ToString();
        navigator.clipboard.writeText(copyText);
        alert("Copied the Doc url to the clipboard: " + copyText);
    }

    window.onafterprint = function() {
        window.location.href = "/externalrecord/lionsteel/Preview?id=" + @Model.Id.ToString() + "&print=true&&ce=bd773a2a-ffc6-4ed2-9ba3-c7ea631628be";
}
    </script>
}