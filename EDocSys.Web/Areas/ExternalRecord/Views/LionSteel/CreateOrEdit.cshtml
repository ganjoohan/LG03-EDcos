@{
    ViewData["Title"] = localizer["Steel Division : External Record"];
    //ViewData["Caption"] = localizer["Manage Procedures here"];
}
@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer localizer
@using EDocSys.Web.Areas.ExternalRecord.Models

@model LionSteelViewModel
<div class="card">
    <div class="card-body" style="max-width:1000px">
        <form id="create-form" method="post" asp-area="externalrecord" asp-controller="LionSteel" asp-action="OnPostCreateOrEdit" asp-route-id="@Model.Id" enctype="multipart/form-data">
            <div class="row">
                <div class="col-md-7">
                    <div class="form-group row">
                        <label class="col-md-4 col-form-label">Company</label>
                        <div class="col-md-8">
                            <div class="input-group">
                                <select name="CompanyId" class="form-control select2bs4" id="CompanyId" asp-for="CompanyId" asp-items="@Model.Companies"></select>
                            </div>
                            <span asp-validation-for="CompanyId" class="text-danger"></span>
                        </div>
                    </div>
                     <div class="form-group">
                        <div class="form-group row">
                         <label class="col-md-4 col-form-label">Process</label>
                           <div class="col-md-8">
                            <div class="input-group">
                                <select name="DepartmentId" class="form-control select2bs4" id="DepartmentId" asp-for="DepartmentId" asp-items="@Model.Departments"></select>
                            </div>
                            <span asp-validation-for="DepartmentId" class="text-danger"></span>
                        </div>
                        </div>
                     </div> 
                     <div class="form-group row">
                            <label class="col-md-4 col-form-label">Form/Certificate/Equipment No</label>
                            <div class="col-md-8">
                                <input type="text" asp-for="FormNo" name="FormNo"  data-mask class="form-control">
                               @* data-inputmask='"mask": "****-***-***"'*@
                                <span asp-validation-for="FormNo" class="text-danger"></span>
                            </div>
                        </div>
                    <div class="form-group">
                        <div class="form-group row">
                            <label class="col-md-4 col-form-label">Title</label>
                            <div class="col-md-8">
                                <input type="text" asp-for="Title" name="Title" class="form-control">
                                <span asp-validation-for="Title" class="text-danger"></span>
                            </div>
                        </div>
                     </div> 
                    <div class="form-group">
                        <div class="form-group row">
                         <label class="col-md-4 col-form-label">Description</label>
                          <div class="col-md-8">
                                <input type="text" asp-for="Description" name="Description" class="form-control">
                                <span asp-validation-for="Description" class="text-danger"></span>
                            </div>
                        </div>
                     </div> 
                      <div class="form-group">
                        <div class="form-group row">
                         <label class="col-md-4 col-form-label">Type</label>
                          <div class="col-md-8">
                                <input type="text" asp-for="Type" name="Type" class="form-control">
                                <span asp-validation-for="Type" class="text-danger"></span>
                            </div>
                        </div>
                     </div> 
                      <div class="form-group">
                        <div class="form-group row">
                         <label class="col-md-4 col-form-label">Sub-Type</label>
                          <div class="col-md-8">
                                <input type="text" asp-for="SubType" name="SubType" class="form-control">
                                <span asp-validation-for="SubType" class="text-danger"></span>
                            </div>
                        </div>
                     </div> 
                      <div class="form-group">
                        <div class="form-group row">
                          <label class="col-md-4 col-form-label">Keep Inform List</label>
                           <div class="col-md-8">
                                <input type="text" asp-for="InformedList" name="InformedList" class="form-control">
                                <span asp-validation-for="InformedList" class="text-danger"></span>
                            </div>
                        </div>
                     </div> 
                      <div class="form-group">
                        <div class="form-group row">
                          <label class="col-md-4 col-form-label">Inform Period (day)</label>
                           <div class="col-md-8">
                                <input type="radio" id="choice1" asp-for="InformPeriod" name="InformPeriod" value="0">
                                <label for="choice1">0</label>
                                <input type="radio" id="choice2" asp-for="InformPeriod" name="InformPeriod" value="30">
                                <label for="choice2">30</label>
                                <input type="radio" id="choice3" asp-for="InformPeriod" name="InformPeriod" value="50">
                                <label for="choice3">60</label>
                                <input type="radio" id="choice3" asp-for="InformPeriod" name="InformPeriod" value="90">
                                <label for="choice3">90</label>
                            </div>
                        </div>
                     </div> 
                </div> 
                <div class="col-md-5">
                    <div class="form-group row">
                         <label class="col-md-4 col-form-label">Location</label>
                          <div class="col-md-8">
                                <input type="text" asp-for="Location" name="Location" class="form-control">
                                <span asp-validation-for="Location" class="text-danger"></span>
                            </div>
                    </div>
                    <div class="form-group row">
                         <label class="col-md-4 col-form-label">Retention Prd</label>
                          <div class="col-md-8">
                                <input type="text" asp-for="RetentionPrd" name="RetentionPrd" class="form-control">
                                <span asp-validation-for="RetentionPrd" class="text-danger"></span>
                            </div>
                    </div>
                    <div class="form-group row">
                         <label class="col-md-4 col-form-label">Resp. Person</label>
                          <div class="col-md-8">
                                <input type="text" asp-for="PIC" name="PIC" class="form-control">
                                <span asp-validation-for="PIC" class="text-danger"></span>
                            </div>
                    </div>
                    <div class="form-group row">
                         <label class="col-md-4 col-form-label">Filing System</label>
                          <div class="col-md-8">
                                <input type="text" asp-for="FilingSystem" name="FilingSystem" class="form-control">
                                <span asp-validation-for="FilingSystem" class="text-danger"></span>
                            </div>
                    </div>
                    <div class="form-group row">
                         <label class="col-md-4 col-form-label">Revision No</label>
                        <div class="col-md-8">
                            <input type="number" asp-for="RevisionNo" name="RevisionNo" class="form-control">
                            <span asp-validation-for="RevisionNo" class="text-danger"></span>
                             <input type="number" asp-for="ArchiveId" name="ArchiveId" class="form-control" hidden>
                        </div>
                    </div>   
                     <div class="form-group row">
                         <label class="col-md-4 col-form-label"></label>
                    </div>
                      <div class="form-group row">
                        <label class="col-md-4 col-form-label">Revision Date</label>
                        <div class="col-md-7 input-group date" id="RevisionDate" name="RevisionDate" asp-for="RevisionDate" data-target-input="nearest">
                            <input type="text" asp-for="RevisionDate" name="RevisionDate" class="form-control datetimepicker-input" , data_inputmask_inputformat="dd/mm/yyyy" placeholder="dd/mm/yyyy">
                            <div class="input-group-append" data-target="#RevisionDate" data-toggle="datetimepicker">
                                <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                            </div>
                            <span asp-validation-for="RevisionDate" class="text-danger"></span>
                        </div>
                    </div> 
                      <div class="form-group row">
                         <label class="col-md-4 col-form-label"></label>
                    </div>
                      <div class="form-group row">
                         <label class="col-md-4 col-form-label">Expiry Date</label>
                            <div class="col-md-7 input-group date" id="ExpiryDate" name="ExpiryDate" asp-for="ExpiryDate" data-target-input="nearest">
                            <input type="text" asp-for="ExpiryDate" name="ExpiryDate" class="form-control datetimepicker-input" , data_inputmask_inputformat="dd/mm/yyyy" placeholder="dd/mm/yyyy">
                            <div class="input-group-append" data-target="#ExpiryDate" data-toggle="datetimepicker">
                                <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                            </div>
                            <span asp-validation-for="ExpiryDate" class="text-danger"></span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-group row">
                <div class="col-12">
                    <b><label>Note : UPLOADING OF A COPY OR SAMPLE OF THE EXTERNAL DOCUMENTS/RECORDS ARE OPTIONAL</label></b>
                </div>
            </div>
            <div class="form-group row">
                <div class="col-12">
                    <div class="upload-container">
                        <input type="file" id="file_upload" asp-for="MyFiles" multiple onchange="uploadFiles()" />
                        <br/>
                    </div>
                </div>
            </div>
             @if (@Model.MyAttachments.Count > 0)
            {
                <div class="row no-print">
                    <div class="col-md-12">
                        <div class="form-group row">
                            <div class="col">
                                <p><b>List of Attachments</b></p>
                                <table class="table table-bordered table-sm">
                                    <tbody>
                                        <tr>
                                            <th>No</th>
                                            <th>File</th>
                                            <th>Download</th>
                                            <th>To Be Deleted</th>
                                        </tr>
                                        @{
                                            int rowCount = 0;


                                            for (int i = 0; i < @Model.MyAttachments.Count; i++)
                                            {
                                                rowCount = @i + 1;
                                                <tr>
                                                    <td>@rowCount</td>
                                                    <td>@Model.MyAttachments[@i].FileName</td>
                                                    <td> 
                                                        <a href="/externalrecord/lionsteel/OnGetDownloadFile?fileId=@Model.MyAttachments[@i].Id" ,@attachment.FileName" class="badge badge-success" >Download</a>   
                                                    </td>
                                                    <td>
                                                        <input type="text" id="chkdeleteid" asp-for="@Model.MyAttachments[@i].Id" hidden >
                                                        <input type="checkbox" id="chkdelete" asp-for="@Model.MyAttachments[@i].Deleted" >

                                                    </td>
                                                </tr>
                                            }
                                        }
                                    </tbody>
                           </table>
                        </div>

                    </div>
                </div>
            </div>
            }
            
            <div class="form-group justify-content-between" style="margin-bottom: 0px !important">
                <button type="submit" class="btn btn-success">Save and Preview</button>
                <a asp-area="ExternalRecord" asp-controller="LionSteel" asp-action="Index" class="btn btn-default">
                    Cancel
                </a>
            </div>
        </form>
    </div>
</div>
<style>
    .upload-container {
        position: relative;
    }
    .upload-container input {
        border: 1px solid #92b0b3;
        background: #f1f1f1;
        outline: 2px dashed #92b0b3;
        outline-offset: -10px;
        padding: 100px 0px 100px 250px;
        text-align: center !important;
        width: 700px;
    }
 
    .upload-container input:hover {
        background: #ddd;
    }
 
    .upload-container:before {
        position: absolute;
        bottom: 50px;
        left: 245px;
        content: " (or) Drag and Drop files here. ";
        color: #3f8188;
        font-weight: 900;
    }
 
    .upload-btn {
        margin-left: 300px;
        padding: 7px 20px;
    }
</style>
@section Scripts {


    <script>
        document.getElementById("btnPrint").onclick = function () {
            printElement(document.getElementById("printThis"));

            var modThis = document.querySelector("#printSection .modifyMe");
            modThis.appendChild(document.createTextNode(" new"));

            window.print();
        }

        function printElement(elem) {
            var domClone = elem.cloneNode(true);

            var $printSection = document.getElementById("printSection");

            if (!$printSection) {
                var $printSection = document.createElement("div");
                $printSection.id = "printSection";
                document.body.appendChild($printSection);
            }

            $printSection.innerHTML = "";

            $printSection.appendChild(domClone);
        }

        function uploadFiles() {
            var files = document.getElementById('file_upload').files;
            if(files.length==0){
                alert("Please first choose or drop any file(s)...");
                return;
            }
            var filenames="";
            for(var i=0;i<files.length;i++){
                filenames+=files[i].name+"\n";
            }
            alert("Selected file(s) :\n____________________\n"+filenames);
        }


    </script>


    <script src="~/plugins/jquery/jquery.min.js"></script>
    <script src="~/plugins/select2/js/select2.full.min.js"></script>
    <script src="~/plugins/moment/moment.min.js"></script>
    <script src="~/plugins/inputmask/jquery.inputmask.min.js"></script>
    <script src="~/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"></script>

@*    <script type="text/javascript" language=javascript>
        $.validator.unobtrusive.parse(document);
        $("#DepartmentId").select2({
            placeholder: "Select a Department",
            theme: "bootstrap4",
            escapeMarkup: function (m) {
                return m;
            }
        });
    </script>*@

    <script>
    class MyUploadAdapter {
        constructor(loader) {
            // The file loader instance to use during the upload. It sounds scary but do not
            // worry — the loader will be passed into the adapter later on in this guide.
            this.loader = loader;
        }

        // Starts the upload process.
        upload() {
            return this.loader.file
                .then(file => new Promise((resolve, reject) => {
                    this._initRequest();
                    this._initListeners(resolve, reject, file);
                    this._sendRequest(file);
                }));
        }

        // Aborts the upload process.
        abort() {
            if (this.xhr) {
                this.xhr.abort();
            }
        }

        // Initializes the XMLHttpRequest object using the URL passed to the constructor.
        _initRequest() {
            const xhr = this.xhr = new XMLHttpRequest();

            // Note that your request may look different. It is up to you and your editor
            // integration to choose the right communication channel. This example uses
            // a POST request with JSON as a data structure but your configuration
            // could be different.
            xhr.open('POST', '@Url.Action("UploadImage","LionSteel")', true);
            xhr.responseType = 'json';
        }

        _initListeners(resolve, reject, file) {
            const xhr = this.xhr;
            const loader = this.loader;
            const genericErrorText = `Couldn't upload file: ${file.name}.`;

            xhr.addEventListener('error', () => reject(genericErrorText));
            xhr.addEventListener('abort', () => reject());
            xhr.addEventListener('load', () => {
                const response = xhr.response;

                // This example assumes the XHR server's "response" object will come with
                // an "error" which has its own "message" that can be passed to reject()
                // in the upload promise.
                //
                // Your integration may handle upload errors in a different way so make sure
                // it is done properly. The reject() function must be called when the upload fails.
                if (!response || response.error) {
                    return reject(response && response.error ? response.error.message : genericErrorText);
                }

                // If the upload is successful, resolve the upload promise with an object containing
                // at least the "default" URL, pointing to the image on the server.
                // This URL will be used to display the image in the content. Learn more in the
                // UploadAdapter#upload documentation.
                resolve({
                    default: response.url
                });
            });

            // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
            // properties which are used e.g. to display the upload progress bar in the editor
            // user interface.
            if (xhr.upload) {
                xhr.upload.addEventListener('progress', evt => {
                    if (evt.lengthComputable) {
                        loader.uploadTotal = evt.total;
                        loader.uploaded = evt.loaded;
                    }
                });
            }
        }

        // Prepares the data and sends the request.
        _sendRequest(file) {
            // Prepare the form data.
            const data = new FormData();

            data.append('upload', file);

            // Important note: This is the right place to implement security mechanisms
            // like authentication and CSRF protection. For instance, you can use
            // XMLHttpRequest.setRequestHeader() to set the request headers containing
            // the CSRF token generated earlier by your application.

            // Send the request.
            this.xhr.send(data);
        }

    }

    function MyCustomUploadAdapterPlugin(editor) {
        editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
            // Configure the URL to the upload script in your back-end here!
            return new MyUploadAdapter(loader);
        };
    }

    ClassicEditor
        .create(document.querySelector('#editor'),
            {
            extraPlugins: [MyCustomUploadAdapterPlugin],
            toolbar: {
                items: [
                    'heading', '|',
                    'fontfamily', 'fontsize', '|',
                    'alignment', '|',
                    'fontColor', 'fontBackgroundColor', '|',
                    'bold', 'italic', 'strikethrough', 'underline', 'subscript', 'superscript', '|',
                    'link', '|',
                    'outdent', 'indent', '|',
                    'bulletedList', 'numberedList', 'todoList', '|',
                    'code', 'codeBlock', '|',
                    'insertTable', '|',
                    'uploadImage', 'blockQuote', '|',
                    'undo', 'redo'
                ],
                shouldNotGroupWhenFull: true
            }
        })
        .then(editor => {
            window.editor = editor;
            @*if (@test == "Create") {
                editor.setData('<p>Some text.</p>');
            }*@

            if ('@ViewBag.CreateEditFlag' == "Create") {
                editor.setData('@ViewData["DetailTemplate"]');
            }

        })


        .catch(error => {
            console.error(error);
        });





    </script>

    <script>
        $(function () {
            //Initialize Select2 Elements
            $('.select2').select2()

            //Initialize Select2 Elements
            $('.select2bs4').select2({
                theme: 'bootstrap4'
            })

            //Datemask dd/mm/yyyy
            $('#datemask').inputmask('dd/mm/yyyy', { 'placeholder': 'dd/mm/yyyy' })
            //Datemask2 mm/dd/yyyy
            $('#datemask2').inputmask('mm/dd/yyyy', { 'placeholder': 'mm/dd/yyyy' })
            //Money Euro
            $('[data-mask]').inputmask()

            //Date picker
            $('#ExpiryDate').datetimepicker({
                //format: 'L'
                //format:'DD/MM/YYYY',
            });

            $('#RevisionDate').datetimepicker({
                format: 'L'
                //format:'DD/MM/YYYY',
            });


            

            //Date and time picker
            $('#reservationdatetime').datetimepicker({ icons: { time: 'far fa-clock' } });

            //Date range picker
            $('#reservation').daterangepicker()
            //Date range picker with time picker
            $('#reservationtime').daterangepicker({
                timePicker: true,
                timePickerIncrement: 30,
                locale: {
                    format: 'MM/DD/YYYY hh:mm A'
                }
            })
            //Date range as a button
            $('#daterange-btn').daterangepicker(
                {
                    ranges: {
                        'Today': [moment(), moment()],
                        'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                        'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                        'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                        'This Month': [moment().startOf('month'), moment().endOf('month')],
                        'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                    },
                    startDate: moment().subtract(29, 'days'),
                    endDate: moment()
                },
                function (start, end) {
                    $('#reportrange span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'))
                }
            )

            //Timepicker
            $('#timepicker').datetimepicker({
                format: 'LT'
            })

            //Bootstrap Duallistbox
            $('.duallistbox').bootstrapDualListbox()

            //Colorpicker
            $('.my-colorpicker1').colorpicker()
            //color picker with addon
            $('.my-colorpicker2').colorpicker()

            $('.my-colorpicker2').on('colorpickerChange', function (event) {
                $('.my-colorpicker2 .fa-square').css('color', event.color.toString());
            })

            $("input[data-bootstrap-switch]").each(function () {
                $(this).bootstrapSwitch('state', $(this).prop('checked'));
            })

             $('#ApprovedBy').validate({
                // Rules for form validation
                rules: {
                    ApprovedBy: { required: true }
                    
                },

                // Messages for form validation
                messages: {
                    
                    ApprovedBy: 'Approver is required.'
                    
                },

                // Do not change code below
                errorPlacement: function (error, element) {
                    error.insertAfter(element.parent());
                }
            });

        })
        // BS-Stepper Init
        document.addEventListener('DOMContentLoaded', function () {
            window.stepper = new Stepper(document.querySelector('.bs-stepper'))
        })

        // DropzoneJS Demo Code Start
        Dropzone.autoDiscover = false

        // Get the template HTML and remove it from the doumenthe template HTML and remove it from the doument
        var previewNode = document.querySelector("#template")
        previewNode.id = ""
        var previewTemplate = previewNode.parentNode.innerHTML
        previewNode.parentNode.removeChild(previewNode)

        var myDropzone = new Dropzone(document.body, { // Make the whole body a dropzone
            url: "/target-url", // Set the url
            thumbnailWidth: 80,
            thumbnailHeight: 80,
            parallelUploads: 20,
            previewTemplate: previewTemplate,
            autoQueue: false, // Make sure the files aren't queued until manually added
            previewsContainer: "#previews", // Define the container to display the previews
            clickable: ".fileinput-button" // Define the element that should be used as click trigger to select files.
        })

        myDropzone.on("addedfile", function (file) {
            // Hookup the start button
            file.previewElement.querySelector(".start").onclick = function () { myDropzone.enqueueFile(file) }
        })

        // Update the total progress bar
        myDropzone.on("totaluploadprogress", function (progress) {
            document.querySelector("#total-progress .progress-bar").style.width = progress + "%"
        })

        myDropzone.on("sending", function (file) {
            // Show the total progress bar when upload starts
            document.querySelector("#total-progress").style.opacity = "1"
            // And disable the start button
            file.previewElement.querySelector(".start").setAttribute("disabled", "disabled")
        })

        // Hide the total progress bar when nothing's uploading anymore
        myDropzone.on("queuecomplete", function (progress) {
            document.querySelector("#total-progress").style.opacity = "0"
        })

        // Setup the buttons for all transfers
        // The "add files" button doesn't need to be setup because the config
        // `clickable` has already been specified.
        document.querySelector("#actions .start").onclick = function () {
            myDropzone.enqueueFiles(myDropzone.getFilesWithStatus(Dropzone.ADDED))
        }
        document.querySelector("#actions .cancel").onclick = function () {
            myDropzone.removeAllFiles(true)
        }

                // DropzoneJS Demo Code End
    </script>

    <script type="text/javascript">

        // DO NOT REMOVE : GLOBAL FUNCTIONS!

        $(document).ready(function () {

            var $create-Form = $('#create-form').validate({
                // Rules for form validation
                rules: {
                    ApprovedBy: { required: true }
                    
                },

                // Messages for form validation
                messages: {
                    
                    ApprovedBy: 'Approver is required.'
                    
                },

                // Do not change code below
                errorPlacement: function (error, element) {
                    error.insertAfter(element.parent());
                }
            });
        })
    </script>






}