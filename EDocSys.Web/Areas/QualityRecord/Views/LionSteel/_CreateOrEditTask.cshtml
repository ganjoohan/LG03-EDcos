@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer localizer
@using EDocSys.Web.Areas.QualityRecord.Models

@model LionSteelViewModel
<form id="create-form" method="post" asp-controller="LionSteel" asp-action="OnPostCreateOrEdit" asp-route-id="@Model.Id" onsubmit="return jQueryModalPost(this);" enctype="multipart/form-data">
    <div class="row">
        <div class="col-md-7">
            <div>
                <div class="form-group row">
                    <label class="col-md-4 col-form-label">DOC No</label>
                    <div class="col-md-8">
                        <input type="text" asp-for="FormNo" name="FormNo" class="form-control">
                        <span asp-validation-for="FormNo" class="text-danger"></span>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="form-group row">
                    <label class="col-md-4 col-form-label">DOC Title</label>
                    <div class="col-md-8">
                        <input type="text" asp-for="Title" name="Title" class="form-control">
                        <span asp-validation-for="Title" class="text-danger"></span>
                    </div>
                </div>

            </div>
        </div>
        <div class="col-md-5">
            <div class="form-group row">
                <label class="col-md-5 col-form-label">Established Date</label>
                <div class="col-md-7">
                    @*<input type="text" asp-for="" name="" class="form-control">
                    <span asp-validation-for="" class="text-danger"></span>*@
                </div>
            </div>
            <div class="form-group row">
                <label class="col-md-5 col-form-label">Revision No</label>
                <div class="col-md-7">
                    @*<input type="text" asp-for="" name="" class="form-control">
                        <span asp-validation-for="" class="text-danger"></span>*@
                </div>
            </div>
            <div class="form-group row">
                <label class="col-md-5 col-form-label">Revision Date</label>
                <div class="col-md-7">
                    @*<input type="text" asp-for="" name="" class="form-control">
                    <span asp-validation-for="" class="text-danger"></span>*@
                </div>
            </div>
            
            <div class="form-group row">
                <div class="col-md-3">
                </div>
            </div>
        </div>

    </div>
   
    <div class="row">
        <div class="col-md-12">
            <div class="form-group row">
                <div class="col">
                    <textarea id="editor" asp-for="Body" class="form-control"></textarea>
                </div>
                
            </div>
        </div>
    </div>

    <div class="form-group justify-content-between" style="margin-bottom: 0px !important">
        <button type="submit" class="btn btn-success">Save</button>
        <button type="submit" class="btn btn-default close-button" data-dismiss="modal">Cancel</button>
    </div>
</form>

<script src="~/ckeditor5-build-classic/ckeditor.js"></script>

<script type="text/javascript" language=javascript>
    $.validator.unobtrusive.parse(document);
    $("#DepartmentId").select2({
        placeholder: "Select a Department",
        theme: "bootstrap4",
        escapeMarkup: function (m) {
            return m;
        }
    });
</script>

<script>
        class MyUploadAdapter {
            constructor(loader) {
                // The file loader instance to use during the upload. It sounds scary but do not
                // worry — the loader will be passed into the adapter later on in this guide.
                this.loader = loader;
            }

            // Starts the upload process.
            upload() {
                return this.loader.file
                    .then(file => new Promise((resolve, reject) => {
                        this._initRequest();
                        this._initListeners(resolve, reject, file);
                        this._sendRequest(file);
                    }));
            }

            // Aborts the upload process.
            abort() {
                if (this.xhr) {
                    this.xhr.abort();
                }
            }

            // Initializes the XMLHttpRequest object using the URL passed to the constructor.
            _initRequest() {
                const xhr = this.xhr = new XMLHttpRequest();

                // Note that your request may look different. It is up to you and your editor
                // integration to choose the right communication channel. This example uses
                // a POST request with JSON as a data structure but your configuration
                // could be different.
                xhr.open('POST', '@Url.Action("UploadImage","LionSteel")', true);
                xhr.responseType = 'json';
            }

            _initListeners(resolve, reject, file) {
                const xhr = this.xhr;
                const loader = this.loader;
                const genericErrorText = `Couldn't upload file: ${file.name}.`;

                xhr.addEventListener('error', () => reject(genericErrorText));
                xhr.addEventListener('abort', () => reject());
                xhr.addEventListener('load', () => {
                    const response = xhr.response;

                    // This example assumes the XHR server's "response" object will come with
                    // an "error" which has its own "message" that can be passed to reject()
                    // in the upload promise.
                    //
                    // Your integration may handle upload errors in a different way so make sure
                    // it is done properly. The reject() function must be called when the upload fails.
                    if (!response || response.error) {
                        return reject(response && response.error ? response.error.message : genericErrorText);
                    }

                    // If the upload is successful, resolve the upload promise with an object containing
                    // at least the "default" URL, pointing to the image on the server.
                    // This URL will be used to display the image in the content. Learn more in the
                    // UploadAdapter#upload documentation.
                    resolve({
                        default: response.url
                    });
                });

                // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
                // properties which are used e.g. to display the upload progress bar in the editor
                // user interface.
                if (xhr.upload) {
                    xhr.upload.addEventListener('progress', evt => {
                        if (evt.lengthComputable) {
                            loader.uploadTotal = evt.total;
                            loader.uploaded = evt.loaded;
                        }
                    });
                }
            }

            // Prepares the data and sends the request.
            _sendRequest(file) {
                // Prepare the form data.
                const data = new FormData();

                data.append('upload', file);

                // Important note: This is the right place to implement security mechanisms
                // like authentication and CSRF protection. For instance, you can use
                // XMLHttpRequest.setRequestHeader() to set the request headers containing
                // the CSRF token generated earlier by your application.

                // Send the request.
                this.xhr.send(data);
            }

        }

        function MyCustomUploadAdapterPlugin(editor) {
            editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
                // Configure the URL to the upload script in your back-end here!
                return new MyUploadAdapter(loader);
            };
        }

            ClassicEditor
                .create(document.querySelector('#editor'), {
                    extraPlugins: [MyCustomUploadAdapterPlugin],
                })
                .then(editor => {
                    window.editor = editor;
                })


                .catch(error => {
                    console.error(error);
                });



</script>