@{
    ViewData["Title"] = localizer["Issuance"];
    //ViewData["Caption"] = localizer["Manage Procedures here"];
}
@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer localizer
@using EDocSys.Web.Areas.Documentation.Models

@model IssuanceViewModel
<div class="card">
    <div class="card-body" style="max-width:1000px">
        <form id="create-form" method="post" asp-area="documentation" asp-controller="Issuance" asp-action="OnPostCreateOrEdit" asp-route-id="@Model.Id" enctype="multipart/form-data">
            <div style="float:right">
                 <label>@Model.DOCNo</label>
            </div>
            <div class="row">
                <div class="col-md-7">
                    <div class="form-group row">
                        <input type="text" asp-for="Id" name="Id"  data-mask class="form-control" hidden="hidden">
                         <input type="text" asp-for="DOCNo" name="DOCNo"  data-mask class="form-control" hidden="hidden">
                           <input type="text" asp-for="DOCStatus" name="DOCStatus"  data-mask class="form-control" hidden="hidden">
                        <label class="col-md-4 col-form-label">Company</label>
                        <div class="col-md-8">
                            <div class="input-group">
                                <select name="CompanyId" class="form-control select2bs4" id="CompanyId" asp-for="CompanyId" asp-items="@Model.Companies" onchange="document.getElementById('refreshInfo').click();" ></select>
                                @*onchange="getComboA(this)"*@
                            </div>
                            <span asp-validation-for="CompanyId" class="text-danger"></span>
                        </div>                       
                    </div>
                       <div class="form-group row">
                        <label class="col-md-4 col-form-label">Process</label>
                        <div class="col-md-8">
                            <div class="input-group">
                                <select name="DepartmentId" class="form-control select2bs4" id="DepartmentId" asp-for="DepartmentId" asp-items="@Model.Departments" onchange="document.getElementById('refreshInfo').click();"></select>
                            </div>
                            <span asp-validation-for="DepartmentId" class="text-danger"></span>
                        </div>
                    </div>
                   
                </div>
                <div class="col-md-5">
                   
                    
                   

                    <div class="form-group row">
                        <div class="col-md-3">
                        </div>
                    </div>
                </div>

            </div>

            <div class="row">
                <div class="col-md-12">
                    <div class="form-group row">
                        <div class="col">
                            <button id="addInfo" type="submit" class="btn btn-success" asp-route-ce="f11c9d1f-abbb-45a1-8d11-b0a5590e5893" asp-route-refresh="false" asp-route-addInfo="true" asp-route-docStatus="@Model.DOCStatus">Add Info</button>
                            <button id="refreshInfo" type="submit" class="btn btn-success" asp-route-ce="f11c9d1f-abbb-45a1-8d11-b0a5590e5893" asp-route-refresh="true" asp-route-addInfo="false" asp-route-docStatus="@Model.DOCStatus" hidden="hidden">Refresh Info</button>                            
                            <br />
                             <table class="table table-bordered table-sm">
                        <tbody>
                            <tr>
                                <td>No</td>
                                <td>Type of Document</td>
                                <td>Document No. / Issue to (max 6 recipients)</td>
                                <td>To Be Deleted</td>
                            </tr>
                               @if(Model.IssuanceInfo.Count > 0)
                                {
                                   @for(int x=0; x<(Model.IssuanceInfo.Count); x++)
                                    {
                                            <tr>  
                                                <input type="text" asp-for="@Model.IssuanceInfo[x].Id" class="form-control" hidden="hidden">  
                                                <input type="text" asp-for="@Model.IssuanceInfo[x].HId" class="form-control" hidden="hidden">  
                                                <input type="text" asp-for="@Model.IssuanceInfo[x].No" class="form-control" hidden="hidden">   
                                                <input type="text" asp-for="@Model.IssuanceInfo[x].IsActive" class="form-control" hidden="hidden">
                                                @if(@Model.DOCStatus != "New")
                                                {
                                                     <td rowspan="3">  
                                                         @Model.IssuanceInfo[x].No
                                                    </td>
                                                }
                                                else
                                                {
                                                    <td rowspan="2">
                                                         @Model.IssuanceInfo[x].No
                                                    </td>
                                                }
                                            
                                            <td>
                                                        <div class="input-group">
                                                            <input type="text" asp-for="@Model.IssuanceInfo[x].DocTypes" class="form-control" value="test" hidden="hidden">                 
                                                            <select class="form-control select2bs4" asp-for="@Model.IssuanceInfo[x].DocType" asp-items="@Model.IssuanceInfo[x].DocTypes" onchange="document.getElementById('refreshInfo').click();" ></select>
                                                        </div>
                                             </td>
                                        <td>
                                            <table class="table table-sm" style="border:hidden">
                                                <tr>
                                                    
                                                    <td>
                                                        <table class="table table-sm" style="border:hidden">
                                                            <tr>FormNo
                                                                <input type="text" asp-for="@Model.IssuanceInfo[x].DOCNos" class="form-control" value="test" hidden="hidden">
                                                                <select class="form-control select2bs4" asp-for="@Model.IssuanceInfo[x].DOCId" asp-items="@Model.IssuanceInfo[x].DOCNos"></select></tr>
                                                            <tr>Enter Recipient's Name (max 6 recipeints)</tr>                                        
                                                            <tr>
                                                                 <td>1. <input type="text" asp-for="@Model.IssuanceInfo[x].RecipientName1" class="form-control"></td>
                                                                 <td>2. <input type="text" asp-for="@Model.IssuanceInfo[x].RecipientName2" class="form-control"></td>
                                                                
                                                                </tr>
                                                             <tr>
                                                                 <td>3. <input type="text" asp-for="@Model.IssuanceInfo[x].RecipientName3" class="form-control"></td>
                                                                 <td>4. <input type="text" asp-for="@Model.IssuanceInfo[x].RecipientName4" class="form-control"></td>
                                                                
                                                             </tr>
                                                             <tr>                                                                
                                                                <td>5. <input type="text" asp-for="@Model.IssuanceInfo[x].RecipientName5" class="form-control"></td>
                                                                <td>6. <input type="text" asp-for="@Model.IssuanceInfo[x].RecipientName6" class="form-control"></td>
                                                            </tr>                     
                                                        </table>
                                                    </td>
                                                </tr>
                                                
                                            </table>
                                       
                                        </td>
                                         <td>
                                                        <input type="text" id="chkdeleteid" asp-for="@Model.IssuanceInfo[x].Id" hidden >
                                                        <input type="checkbox" id="chkdelete" asp-for="@Model.IssuanceInfo[x].Deleted" >

                                                    </td>
                                    </tr>
                                         @if (@Model.DOCStatus != "New")
                                         {
                                            <tr>                                                           
                                                            <td>Details of Changes:</td>
                                                            <td><input type="text" asp-for="@Model.IssuanceInfo[x].Amendment" class="form-control"></td>
                                                            </tr>
                                                        }
                                                        else
                                                        {
                                                            <tr hidden="hidden">                                                            
                                                            <td>Details of Changes:</td>
                                                            <td><input type="text" asp-for="@Model.IssuanceInfo[x].Amendment" class="form-control" hidden="hidden"></td>
                                                            </tr>
                                                             
                                                        }
                                                        <tr>
                                                          
                                                    <td>Purpose for Print Request:</td>
                                                    <td><input type="text" asp-for="@Model.IssuanceInfo[x].Purpose" class="form-control"></td>
                                                </tr>
                                    }                               
                                } 
                            </tbody>     
                             </table>
                         </div>

                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-12">
                    <table class="table table-bordered table-sm">
                        <tbody>
                            <tr>
                                <td></td>
                                <td><b>Requested By</b></td>
                                <td><b>To Be Verify By</b></td>
                                <td><b>To Be Approve By</b></td>
                            @*    <td><b>To Be Acknowledge By</b></td>*@
                            </tr>
                            <tr>
                                <td><b>Name</b></td>
                                <td>
                                    
                                                <input type="text" asp-for="RequestedBy" name="RequestedBy" class="form-control">
                                                <span asp-validation-for="RequestedBy" class="text-danger"></span>
                                    
                                </td>
                                <td>
                                    <div>
                                        
                                            <select name="VerifiedBy" class="form-control select2bs4" id="VerifiedBy" asp-for="VerifiedBy" asp-items="@Model.UserListVer">
                                            <option value="">Select </option>
                                            </select>
                                        
                                        <span asp-validation-for="VerifiedBy" class="text-danger"></span>
                                    </div>
                                </td>
                                <td>
                                    <div>
                                        
                                            <select name="ApprovedBy" class="form-control select2bs4" id="ApprovedBy" asp-for="ApprovedBy" asp-items="@Model.UserListApp">
                                            <option value="">Select </option>
                                            </select>
                                        
                                        <span asp-validation-for="ApprovedBy" class="text-danger"></span>
                                    </div>
                                </td>
                           @*     <td>
                                    <div>
                                        
                                            <select name="AcknowledgedBy" class="form-control select2bs4" id="AcknowledgedBy" asp-for="AcknowledgedBy" asp-items="@Model.UserListAck">
                                            <option value="">Select </option>
                                            </select>
                                        
                                        <span asp-validation-for="AcknowledgedBy" class="text-danger"></span>
                                    </div>
                                </td>*@
                            </tr>
                            <tr>
                                <td><b>Position</b></td>
                                <td>
                                    
                                    <input type="text" asp-for="RequestedByPosition" name="RequestedByPosition" class="form-control">
                                    <span asp-validation-for="RequestedByPosition" class="text-danger"></span>
                                    
                                </td>
                                <td></td>
                                <td></td>
                          @*      <td></td>*@
                            </tr>
                            <tr>
                                <td><b>Date</b></td>
                                <td>
                                    <div class="col-md-12 input-group date" id="RequestedByDate" name="RequestedByDate" asp-for="RequestedByDate" data-target-input="nearest">
                                        <input type="text" asp-for="RequestedByDate" name="RequestedByDate"  class="form-control datetimepicker-input" placeholder="DD/MM/YYYY" autocomplete="off">
                                        <div class="input-group-append" data-target="#PreparedByDate" data-toggle="datetimepicker">
                                            <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                                        </div>
                                        <span asp-validation-for="RequestedByDate" class="text-danger"></span>
                                    </div>
                                </td>
                                <td></td>
                                <td></td>
                                @*<td></td>*@
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>


            <div class="form-group justify-content-between" style="margin-bottom: 0px !important">
                <button type="submit" class="btn btn-success">Save and Preview</button>
                @if(@Model.DOCStatus == "New")
                {
                <a asp-area="Documentation" asp-controller="Issuance" asp-action="Index"  asp-route-docType="new" class="btn btn-default">
                    Cancel
                    </a>
                }
                else
                {
                    <a asp-area="Documentation" asp-controller="Issuance" asp-action="Index"  asp-route-docType="edit" class="btn btn-default">
                    Cancel
                    </a>
                }
            </div>
        </form>
    </div>
</div>
@section Scripts {


    <script>
        document.getElementById("btnPrint").onclick = function () {
            printElement(document.getElementById("printThis"));

            var modThis = document.querySelector("#printSection .modifyMe");
            modThis.appendChild(document.createTextNode(" new"));

            window.print();
        }

        function printElement(elem) {
            var domClone = elem.cloneNode(true);

            var $printSection = document.getElementById("printSection");

            if (!$printSection) {
                var $printSection = document.createElement("div");
                $printSection.id = "printSection";
                document.body.appendChild($printSection);
            }

            $printSection.innerHTML = "";

            $printSection.appendChild(domClone);
        }
    </script>


    <script src="~/plugins/jquery/jquery.min.js"></script>
    <script src="~/plugins/select2/js/select2.full.min.js"></script>
    <script src="~/plugins/moment/moment.min.js"></script>
    <script src="~/plugins/inputmask/jquery.inputmask.min.js"></script>
    <script src="~/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"></script>

@*    <script type="text/javascript" language=javascript>
        $.validator.unobtrusive.parse(document);
        $("#DepartmentId").select2({
            placeholder: "Select a Department",
            theme: "bootstrap4",
            escapeMarkup: function (m) {
                return m;
            }
        });
    </script>*@

    <script>
    class MyUploadAdapter {
        constructor(loader) {
            // The file loader instance to use during the upload. It sounds scary but do not
            // worry — the loader will be passed into the adapter later on in this guide.
            this.loader = loader;
        }

        // Starts the upload process.
        upload() {
            return this.loader.file
                .then(file => new Promise((resolve, reject) => {
                    this._initRequest();
                    this._initListeners(resolve, reject, file);
                    this._sendRequest(file);
                }));
        }

        // Aborts the upload process.
        abort() {
            if (this.xhr) {
                this.xhr.abort();
            }
        }

        // Initializes the XMLHttpRequest object using the URL passed to the constructor.
        _initRequest() {
            const xhr = this.xhr = new XMLHttpRequest();

            // Note that your request may look different. It is up to you and your editor
            // integration to choose the right communication channel. This example uses
            // a POST request with JSON as a data structure but your configuration
            // could be different.
            xhr.open('POST', '@Url.Action("UploadImage","Issuance")', true);
            xhr.responseType = 'json';
        }

        _initListeners(resolve, reject, file) {
            const xhr = this.xhr;
            const loader = this.loader;
            const genericErrorText = `Couldn't upload file: ${file.name}.`;

            xhr.addEventListener('error', () => reject(genericErrorText));
            xhr.addEventListener('abort', () => reject());
            xhr.addEventListener('load', () => {
                const response = xhr.response;

                // This example assumes the XHR server's "response" object will come with
                // an "error" which has its own "message" that can be passed to reject()
                // in the upload promise.
                //
                // Your integration may handle upload errors in a different way so make sure
                // it is done properly. The reject() function must be called when the upload fails.
                if (!response || response.error) {
                    return reject(response && response.error ? response.error.message : genericErrorText);
                }

                // If the upload is successful, resolve the upload promise with an object containing
                // at least the "default" URL, pointing to the image on the server.
                // This URL will be used to display the image in the content. Learn more in the
                // UploadAdapter#upload documentation.
                resolve({
                    default: response.url
                });
            });

            // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
            // properties which are used e.g. to display the upload progress bar in the editor
            // user interface.
            if (xhr.upload) {
                xhr.upload.addEventListener('progress', evt => {
                    if (evt.lengthComputable) {
                        loader.uploadTotal = evt.total;
                        loader.uploaded = evt.loaded;
                    }
                });
            }
        }

        // Prepares the data and sends the request.
        _sendRequest(file) {
            // Prepare the form data.
            const data = new FormData();

            data.append('upload', file);

            // Important note: This is the right place to implement security mechanisms
            // like authentication and CSRF protection. For instance, you can use
            // XMLHttpRequest.setRequestHeader() to set the request headers containing
            // the CSRF token generated earlier by your application.

            // Send the request.
            this.xhr.send(data);
        }

    }

    function MyCustomUploadAdapterPlugin(editor) {
        editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
            // Configure the URL to the upload script in your back-end here!
            return new MyUploadAdapter(loader);
        };
    }

    ClassicEditor
        .create(document.querySelector('#editor'),
            {
            extraPlugins: [MyCustomUploadAdapterPlugin],
            toolbar: {
                items: [
                    'heading', '|',
                    'fontfamily', 'fontsize', '|',
                    'alignment', '|',
                    'fontColor', 'fontBackgroundColor', '|',
                    'bold', 'italic', 'strikethrough', 'underline', 'subscript', 'superscript', '|',
                    'link', '|',
                    'outdent', 'indent', '|',
                    'bulletedList', 'numberedList', 'todoList', '|',
                    'code', 'codeBlock', '|',
                    'insertTable', '|',
                    'uploadImage', 'blockQuote', '|',
                    'undo', 'redo'
                ],
                shouldNotGroupWhenFull: true
            }
        })
        .then(editor => {
            window.editor = editor;
            @*if (@test == "Create") {
                editor.setData('<p>Some text.</p>');
            }*@

            if ('@ViewBag.CreateEditFlag' == "Create") {
                editor.setData('@ViewData["DetailTemplate"]');
            }

        })


        .catch(error => {
            console.error(error);
        });





    </script>

    <script>
        $(function () {
            //Initialize Select2 Elements
            $('.select2').select2()

            //Initialize Select2 Elements
            $('.select2bs4').select2({
                theme: 'bootstrap4'
            })

            // Datepicker configuration
            var datePickerConfig = {
                format: 'DD/MM/YYYY',
                ignoreReadonly: true,
                allowInputToggle: true,
                useCurrent: false,
                keepInvalid: false,
                icons: {
                    time: 'far fa-clock',
                    date: 'far fa-calendar',
                    up: 'fas fa-arrow-up',
                    down: 'fas fa-arrow-down',
                    previous: 'fas fa-chevron-left',
                    next: 'fas fa-chevron-right',
                    today: 'far fa-calendar-check',
                    clear: 'far fa-trash-alt',
                    close: 'fas fa-times'
                }
            };

            // Initialize datepickers
            $('#EffectiveDate, #RevisionDate, #EstalishedDate, #PreparedByDate').datetimepicker(datePickerConfig);

            // Enable manual input and copy-paste
            $('#EffectiveDate input, #RevisionDate input, #EstalishedDate input, #PreparedByDate input').attr('readonly', false);

            // Remove time on blur (if somehow entered)
            $('#EffectiveDate input, #RevisionDate input, #EstalishedDate input, #PreparedByDate input').on('blur', function () {
                var date = moment($(this).val(), 'DD/MM/YYYY');
                if (date.isValid()) {
                    $(this).val(date.format('DD/MM/YYYY'));
                }
            });

            //Bootstrap Duallistbox
            $('.duallistbox').bootstrapDualListbox()

            //Colorpicker
            $('.my-colorpicker1').colorpicker()
            //color picker with addon
            $('.my-colorpicker2').colorpicker()

            $('.my-colorpicker2').on('colorpickerChange', function (event) {
                $('.my-colorpicker2 .fa-square').css('color', event.color.toString());
            })

            $("input[data-bootstrap-switch]").each(function () {
                $(this).bootstrapSwitch('state', $(this).prop('checked'));
            })

             $('#ApprovedBy').validate({
                // Rules for form validation
                rules: {
                    ApprovedBy: { required: true }
                    
                },

                // Messages for form validation
                messages: {
                    
                    ApprovedBy: 'Approver is required.'
                    
                },

                // Do not change code below
                errorPlacement: function (error, element) {
                    error.insertAfter(element.parent());
                }
            });

        })
        // BS-Stepper Init
        document.addEventListener('DOMContentLoaded', function () {
            window.stepper = new Stepper(document.querySelector('.bs-stepper'))
        })

        // DropzoneJS Demo Code Start
        Dropzone.autoDiscover = false

        // Get the template HTML and remove it from the doumenthe template HTML and remove it from the doument
        var previewNode = document.querySelector("#template")
        previewNode.id = ""
        var previewTemplate = previewNode.parentNode.innerHTML
        previewNode.parentNode.removeChild(previewNode)

        var myDropzone = new Dropzone(document.body, { // Make the whole body a dropzone
            url: "/target-url", // Set the url
            thumbnailWidth: 80,
            thumbnailHeight: 80,
            parallelUploads: 20,
            previewTemplate: previewTemplate,
            autoQueue: false, // Make sure the files aren't queued until manually added
            previewsContainer: "#previews", // Define the container to display the previews
            clickable: ".fileinput-button" // Define the element that should be used as click trigger to select files.
        })

        myDropzone.on("addedfile", function (file) {
            // Hookup the start button
            file.previewElement.querySelector(".start").onclick = function () { myDropzone.enqueueFile(file) }
        })

        // Update the total progress bar
        myDropzone.on("totaluploadprogress", function (progress) {
            document.querySelector("#total-progress .progress-bar").style.width = progress + "%"
        })

        myDropzone.on("sending", function (file) {
            // Show the total progress bar when upload starts
            document.querySelector("#total-progress").style.opacity = "1"
            // And disable the start button
            file.previewElement.querySelector(".start").setAttribute("disabled", "disabled")
        })

        // Hide the total progress bar when nothing's uploading anymore
        myDropzone.on("queuecomplete", function (progress) {
            document.querySelector("#total-progress").style.opacity = "0"
        })

        // Setup the buttons for all transfers
        // The "add files" button doesn't need to be setup because the config
        // `clickable` has already been specified.
        document.querySelector("#actions .start").onclick = function () {
            myDropzone.enqueueFiles(myDropzone.getFilesWithStatus(Dropzone.ADDED))
        }
        document.querySelector("#actions .cancel").onclick = function () {
            myDropzone.removeAllFiles(true)
        }

                // DropzoneJS Demo Code End
    </script>

    <script type="text/javascript">

        // DO NOT REMOVE : GLOBAL FUNCTIONS!

        $(document).ready(function () {

            var $create-Form = $('#create-form').validate({
                // Rules for form validation
                rules: {
                    ApprovedBy: { required: true }
                    
                },

                // Messages for form validation
                messages: {
                    
                    ApprovedBy: 'Approver is required.'
                    
                },

                // Do not change code below
                errorPlacement: function (error, element) {
                    error.insertAfter(element.parent());
                }
            });
        })
    </script>






}